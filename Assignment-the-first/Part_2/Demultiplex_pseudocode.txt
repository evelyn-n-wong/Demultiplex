Author: Evelyn Wong 
Date Created: 2023-07-26
Last updated: 2023-07-27
Problem Description: Pseudocode that will output 24 matched indices for R1, 24 matched indices for R4, 2 files for unknown indices or low quality 
            for R1 and R4, and 2 files for non-matching pairs for R1 and R4. 


Notes of Illumina Fastq files received from BGMP 2017 Library prep:

R1: Sequence Read 1 forward read
R2: Index
R3: Index
R4: Sequence Read 2 reverse read

import gzip: allows us to read zipped files directly from python

Create a function to pass in the files 
def get_args():
    '''Function gets arguments from user for FASTQ files to be parsed and stores them to be used '''
    parser arguments for each of the four files that read (R1, R2, R3, R4)
    initialize args variable to get passed arguments
    return args

intialize variable of arguments to be used in later functions

def rev_complement(sequence:str):
'''This function takes in a sequence and returns the reverse complement of the sequence as a string'''
intialize empty string as reverse_complement to store the sequence 
    
    initialize dictionary of base pairs 
    A: T, T:A, G:C, C:G, N:N

    return reverse complement
    Input: ATCGATT
    Complement: TAGCTAA
    Reverse Complement: AATCGAT

*Note: The following functions could also be replaced by importing the bioinfy.py module instead of having it here*

def convert_Phred(letter: str) -> int:
'''This function converts a single character into a phred score'''
    return ord(letter) - 33
    Input: H 
    Output: 39
    Change to use bioinfo module instead

def qual_score(phred_score: str) -> float:
    '''This function takes in a string, parses through the characters
      in the string, adds the the individual Q-score, and returns the average Q-score'''
    read the length of the phred score string passed in
    sum is a running list of the quality score value
    for loop to go through individual characters in the phred score string
    return quality score
    *Change to use bioinfo module instead

def index_dictionary():
'''this function makes a dictionary of indexes record"
    possible function to include in the append_to_header
    would want the keys to be the indexes and also have the values be the condition (i.e. matched)
    returns dictionary of indices

* Other functions might be outputting the length of the dictionaries (summary information).


def append_to_header(takes in files):
'''This function goes through every header in the file(s) and returns new headers with the index at the end'''
    open input files from args to read and open output files to write 
    *Note that need to use gzip because the files are zipped
    set counters for matched, unmatched, and unknown
    while True:
        # have a break condition
        if the files reach the end of the file
            break
        get headers of all files
        get sequences of all files (Note that for R3, call reverse_complement)
        get plus lines -> not necessary. When writing into new file, change it just "+\n"
        get quality scores

        Conditions:
        
        if indices of R2 has an 'N' or is low quality (<30):
        ''' account for corresponding records that may match but have low quality '''
            increment unknown
            write to unknown file for R1
            write to unknown file for R4
        elif indices of R3 has an 'N' or is low quality (<30):
        ''' account for reads of the second index which can also have unknown bases or low qual scores '''
            increment unknown
            write to unknown file for R1 
            write to unknown file for R4
        elif indices of R2 match R3 "R2==R3"
            increment matched 
            write to matched file for R1 
            write to matched file for R4
        else indices in R2 or R3 is unmatched !=
            increment unmatched
            write to unmatched file for R1
            write to unmatched file for R4
    All outputs would be files of their specific output category
    Input1: NNNNNNNNNNNAANNNN
    Output: write to unknown file
    Input2: ACGACGAGCACGATTAC (with matched index)
    Output: write to matched file with the new header with the matched index


